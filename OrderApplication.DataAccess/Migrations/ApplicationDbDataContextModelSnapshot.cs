// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderApplication.DataAccess;

namespace OrderApplication.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbDataContext))]
    partial class ApplicationDbDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("OrderApplication.DataAccess.Entities.AddressDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityCode")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51e7a82e-ff20-4a95-811a-e026a5a676e0"),
                            AddressLine = "Fake Data AddressLine",
                            City = "Konya",
                            CityCode = 42,
                            Country = "Türkiye"
                        },
                        new
                        {
                            Id = new Guid("3a1040a7-79ec-40f8-9735-6dfc6469e556"),
                            AddressLine = "Fake Data AddressLine İstanbul",
                            City = "İstanbul",
                            CityCode = 34,
                            Country = "Türkiye"
                        });
                });

            modelBuilder.Entity("OrderApplication.DataAccess.Entities.CustomerDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressDTOId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressDTOId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OrderApplication.DataAccess.Entities.OrderDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressDTOId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerDTOId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductDTOId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressDTOId");

                    b.HasIndex("CustomerDTOId");

                    b.HasIndex("ProductDTOId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderApplication.DataAccess.Entities.ProductDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a60a223-a369-421d-a60b-c25fa3b7397e"),
                            ImageUrl = "/image/path",
                            Name = "Ürün 1"
                        },
                        new
                        {
                            Id = new Guid("bbec496d-1ae0-4e30-8891-e4c84e3f2e1e"),
                            ImageUrl = "/image/path",
                            Name = "Ürün 2"
                        });
                });

            modelBuilder.Entity("OrderApplication.DataAccess.Entities.CustomerDTO", b =>
                {
                    b.HasOne("OrderApplication.DataAccess.Entities.AddressDTO", "AddressDTO")
                        .WithMany()
                        .HasForeignKey("AddressDTOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressDTO");
                });

            modelBuilder.Entity("OrderApplication.DataAccess.Entities.OrderDTO", b =>
                {
                    b.HasOne("OrderApplication.DataAccess.Entities.AddressDTO", "AddressDTO")
                        .WithMany()
                        .HasForeignKey("AddressDTOId");

                    b.HasOne("OrderApplication.DataAccess.Entities.CustomerDTO", "CustomerDTO")
                        .WithMany()
                        .HasForeignKey("CustomerDTOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderApplication.DataAccess.Entities.ProductDTO", "ProductDTO")
                        .WithMany()
                        .HasForeignKey("ProductDTOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressDTO");

                    b.Navigation("CustomerDTO");

                    b.Navigation("ProductDTO");
                });
#pragma warning restore 612, 618
        }
    }
}
